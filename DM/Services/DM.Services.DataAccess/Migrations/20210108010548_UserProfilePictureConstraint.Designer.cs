// <auto-generated />
using System;
using DM.Services.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DM.Services.DataAccess.Migrations
{
    [DbContext(typeof(DmDbContext))]
    [Migration("20210108010548_UserProfilePictureConstraint")]
    partial class UserProfilePictureConstraint
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Administration.Ban", b =>
                {
                    b.Property<Guid>("BanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessRestrictionPolicy")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVoluntary")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ModeratorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("BanId");

                    b.HasIndex("ModeratorId");

                    b.HasIndex("UserId");

                    b.ToTable("Bans");
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Administration.Report", b =>
                {
                    b.Property<Guid>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Answer")
                        .HasColumnType("text");

                    b.Property<Guid?>("AnswerAuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReportText")
                        .HasColumnType("text");

                    b.Property<Guid>("TargetId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("ReportId");

                    b.HasIndex("AnswerAuthorId");

                    b.HasIndex("TargetId");

                    b.HasIndex("UserId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Administration.Warning", b =>
                {
                    b.Property<Guid>("WarningId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ModeratorId")
                        .HasColumnType("uuid");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("WarningId");

                    b.HasIndex("EntityId");

                    b.HasIndex("ModeratorId");

                    b.HasIndex("UserId");

                    b.ToTable("Warnings");
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Common.ChatMessage", b =>
                {
                    b.Property<Guid>("ChatMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("ChatMessageId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Common.Comment", b =>
                {
                    b.Property<Guid>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LastUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("CommentId");

                    b.HasIndex("EntityId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Common.Like", b =>
                {
                    b.Property<Guid>("LikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LikeId");

                    b.HasIndex("EntityId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Common.Review", b =>
                {
                    b.Property<Guid>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("ReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Common.Tag", b =>
                {
                    b.Property<Guid>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagGroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("TagId");

                    b.HasIndex("TagGroupId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Common.TagGroup", b =>
                {
                    b.Property<Guid>("TagGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("TagGroupId");

                    b.ToTable("TagGroups");
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Common.Upload", b =>
                {
                    b.Property<Guid>("UploadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FilePath")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("UploadId");

                    b.HasIndex("EntityId");

                    b.HasIndex("UserId");

                    b.ToTable("Uploads");
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Fora.Forum", b =>
                {
                    b.Property<Guid>("ForumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CreateTopicPolicy")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int>("ViewPolicy")
                        .HasColumnType("integer");

                    b.HasKey("ForumId");

                    b.ToTable("Fora");
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Fora.ForumModerator", b =>
                {
                    b.Property<Guid>("ForumModeratorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ForumId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("ForumModeratorId");

                    b.HasIndex("ForumId");

                    b.HasIndex("UserId");

                    b.ToTable("ForumModerators");
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Fora.ForumTopic", b =>
                {
                    b.Property<Guid>("ForumTopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Attached")
                        .HasColumnType("boolean");

                    b.Property<bool>("Closed")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ForumId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LastCommentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("ForumTopicId");

                    b.HasIndex("ForumId");

                    b.HasIndex("LastCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("ForumTopics");
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Games.Characters.Attributes.CharacterAttribute", b =>
                {
                    b.Property<Guid>("CharacterAttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("CharacterAttributeId");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterAttributes");
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Games.Characters.Character", b =>
                {
                    b.Property<Guid>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessPolicy")
                        .HasColumnType("integer");

                    b.Property<int?>("Alignment")
                        .HasColumnType("integer");

                    b.Property<string>("Appearance")
                        .HasColumnType("text");

                    b.Property<string>("Class")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<string>("Inventory")
                        .HasColumnType("text");

                    b.Property<bool>("IsNpc")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LastUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Race")
                        .HasColumnType("text");

                    b.Property<string>("Skills")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Story")
                        .HasColumnType("text");

                    b.Property<string>("Temper")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("CharacterId");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Games.Game", b =>
                {
                    b.Property<Guid>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AssistantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AttributeSchemaId")
                        .HasColumnType("uuid");

                    b.Property<int>("CommentariesAccessMode")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("DisableAlignment")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideDiceResult")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideInventory")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideSkills")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideStory")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideTemper")
                        .HasColumnType("boolean");

                    b.Property<string>("Info")
                        .HasColumnType("text");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("NannyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notepad")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SettingName")
                        .HasColumnType("text");

                    b.Property<bool>("ShowPrivateMessages")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("SystemName")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("GameId");

                    b.HasIndex("AssistantId");

                    b.HasIndex("MasterId");

                    b.HasIndex("NannyId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Games.Links.BlackListLink", b =>
                {
                    b.Property<Guid>("BlackListLinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("BlackListLinkId");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("BlackListLinks");
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Games.Links.GameTag", b =>
                {
                    b.Property<Guid>("GameTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.HasKey("GameTagId");

                    b.HasIndex("GameId");

                    b.HasIndex("TagId");

                    b.ToTable("GameTags");
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Games.Links.PendingPost", b =>
                {
                    b.Property<Guid>("PendingPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AwaitingUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PendingUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("PendingPostId");

                    b.HasIndex("AwaitingUserId");

                    b.HasIndex("PendingUserId");

                    b.HasIndex("RoomId");

                    b.ToTable("PendingPosts");
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Games.Links.Reader", b =>
                {
                    b.Property<Guid>("ReaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("ReaderId");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("Readers");
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Games.Links.RoomClaim", b =>
                {
                    b.Property<Guid>("RoomClaimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Policy")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("RoomClaimId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomClaims");
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Games.Posts.Post", b =>
                {
                    b.Property<Guid>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CharacterId")
                        .HasColumnType("uuid");

                    b.Property<string>("Commentary")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LastUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastUpdateUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("MasterMessage")
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("PostId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("LastUpdateUserId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Games.Posts.Room", b =>
                {
                    b.Property<Guid>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessType")
                        .HasColumnType("integer");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("NextRoomId")
                        .HasColumnType("uuid");

                    b.Property<double>("OrderNumber")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("PreviousRoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("RoomId");

                    b.HasIndex("GameId");

                    b.HasIndex("NextRoomId");

                    b.HasIndex("PreviousRoomId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Games.Rating.Vote", b =>
                {
                    b.Property<Guid>("VoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<short>("SignValue")
                        .HasColumnType("smallint");

                    b.Property<Guid>("TargetUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("VoteId");

                    b.HasIndex("GameId");

                    b.HasIndex("PostId");

                    b.HasIndex("TargetUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Messaging.Conversation", b =>
                {
                    b.Property<Guid>("ConversationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastMessageId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Visavi")
                        .HasColumnType("boolean");

                    b.HasKey("ConversationId");

                    b.HasIndex("LastMessageId");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Messaging.Message", b =>
                {
                    b.Property<Guid>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("MessageId");

                    b.HasIndex("ConversationId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Messaging.UserConversationLink", b =>
                {
                    b.Property<Guid>("UserConversationLinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("UserConversationLinkId");

                    b.HasIndex("ConversationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserConversationLinks");
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Users.Token", b =>
                {
                    b.Property<Guid>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("TokenId");

                    b.HasIndex("EntityId");

                    b.HasIndex("UserId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Users.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessPolicy")
                        .HasColumnType("integer");

                    b.Property<bool>("Activated")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanMerge")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Icq")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Info")
                        .HasColumnType("text");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LastVisitDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Login")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<Guid?>("MergeRequested")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("character varying(300)")
                        .HasMaxLength(300);

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int>("QualityRating")
                        .HasColumnType("integer");

                    b.Property<int>("QuantityRating")
                        .HasColumnType("integer");

                    b.Property<bool>("RatingDisabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Salt")
                        .HasColumnType("character varying(120)")
                        .HasMaxLength(120);

                    b.Property<string>("Skype")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Status")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("TimezoneId")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Administration.Ban", b =>
                {
                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Users.User", "Moderator")
                        .WithMany("BansGiven")
                        .HasForeignKey("ModeratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Users.User", "User")
                        .WithMany("BansReceived")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Administration.Report", b =>
                {
                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Users.User", "AnswerAuthor")
                        .WithMany("ReportsAnswered")
                        .HasForeignKey("AnswerAuthorId");

                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Users.User", "Target")
                        .WithMany("ReportsTaken")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Users.User", "Author")
                        .WithMany("ReportsGiven")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Administration.Warning", b =>
                {
                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Common.ChatMessage", "ChatMessage")
                        .WithMany("Warnings")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Common.Comment", "Comment")
                        .WithMany("Warnings")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Users.User", "Moderator")
                        .WithMany("WarningsGiven")
                        .HasForeignKey("ModeratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Users.User", "User")
                        .WithMany("WarningsReceived")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Common.ChatMessage", b =>
                {
                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Users.User", "Author")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Common.Comment", b =>
                {
                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Fora.ForumTopic", "Topic")
                        .WithMany("Comments")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Games.Game", "Game")
                        .WithMany("Comments")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Users.User", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Common.Like", b =>
                {
                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Common.Comment", "Comment")
                        .WithMany("Likes")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Fora.ForumTopic", "Topic")
                        .WithMany("Likes")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Common.Review", "Review")
                        .WithMany("Likes")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Users.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Common.Review", b =>
                {
                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Users.User", "Author")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Common.Tag", b =>
                {
                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Common.TagGroup", "TagGroup")
                        .WithMany("Tags")
                        .HasForeignKey("TagGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Common.Upload", b =>
                {
                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Games.Characters.Character", "Character")
                        .WithMany("Pictures")
                        .HasForeignKey("EntityId");

                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Games.Game", "Game")
                        .WithMany("Pictures")
                        .HasForeignKey("EntityId");

                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Games.Posts.Post", "Post")
                        .WithMany("Attachments")
                        .HasForeignKey("EntityId");

                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Users.User", "UserProfile")
                        .WithMany("ProfilePictures")
                        .HasForeignKey("EntityId");

                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Users.User", "Owner")
                        .WithMany("Uploads")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Fora.ForumModerator", b =>
                {
                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Fora.Forum", "Forum")
                        .WithMany("Moderators")
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Users.User", "User")
                        .WithMany("ForumModerators")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Fora.ForumTopic", b =>
                {
                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Fora.Forum", "Forum")
                        .WithMany("Topics")
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Common.Comment", "LastComment")
                        .WithMany()
                        .HasForeignKey("LastCommentId");

                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Users.User", "Author")
                        .WithMany("Topics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Games.Characters.Attributes.CharacterAttribute", b =>
                {
                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Games.Characters.Character", "Character")
                        .WithMany("Attributes")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Games.Characters.Character", b =>
                {
                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Games.Game", "Game")
                        .WithMany("Characters")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Users.User", "Author")
                        .WithMany("Characters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Games.Game", b =>
                {
                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Users.User", "Assistant")
                        .WithMany("GamesAsAssistant")
                        .HasForeignKey("AssistantId");

                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Users.User", "Master")
                        .WithMany("GamesAsMaster")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Users.User", "Nanny")
                        .WithMany("GamesAsNanny")
                        .HasForeignKey("NannyId");
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Games.Links.BlackListLink", b =>
                {
                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Games.Game", "Game")
                        .WithMany("BlackList")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Users.User", "User")
                        .WithMany("GamesBlacklisted")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Games.Links.GameTag", b =>
                {
                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Games.Game", "Game")
                        .WithMany("GameTags")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Common.Tag", "Tag")
                        .WithMany("GameTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Games.Links.PendingPost", b =>
                {
                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Users.User", "AwaitingUser")
                        .WithMany("WaitsForPosts")
                        .HasForeignKey("AwaitingUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Users.User", "PendingUser")
                        .WithMany("PostsRequired")
                        .HasForeignKey("PendingUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Games.Posts.Room", "Room")
                        .WithMany("PendingPosts")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Games.Links.Reader", b =>
                {
                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Games.Game", "Game")
                        .WithMany("Readers")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Users.User", "User")
                        .WithMany("GamesObserved")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Games.Links.RoomClaim", b =>
                {
                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Games.Characters.Character", "Character")
                        .WithMany("RoomLinks")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Games.Links.Reader", "Reader")
                        .WithMany("RoomLinks")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Games.Posts.Room", "Room")
                        .WithMany("RoomClaims")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Games.Posts.Post", b =>
                {
                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Games.Characters.Character", "Character")
                        .WithMany("Posts")
                        .HasForeignKey("CharacterId");

                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Users.User", "LastUpdateAuthor")
                        .WithMany()
                        .HasForeignKey("LastUpdateUserId");

                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Games.Posts.Room", "Room")
                        .WithMany("Posts")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Users.User", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Games.Posts.Room", b =>
                {
                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Games.Game", "Game")
                        .WithMany("Rooms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Games.Posts.Room", "NextRoom")
                        .WithMany()
                        .HasForeignKey("NextRoomId");

                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Games.Posts.Room", "PreviousRoom")
                        .WithMany()
                        .HasForeignKey("PreviousRoomId");
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Games.Rating.Vote", b =>
                {
                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Games.Game", "Game")
                        .WithMany("Votes")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Games.Posts.Post", "Post")
                        .WithMany("Votes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Users.User", "TargetUser")
                        .WithMany("VotesReceived")
                        .HasForeignKey("TargetUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Users.User", "VotedUser")
                        .WithMany("VotesGiven")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Messaging.Conversation", b =>
                {
                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Messaging.Message", "LastMessage")
                        .WithMany()
                        .HasForeignKey("LastMessageId");
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Messaging.Message", b =>
                {
                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Messaging.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Users.User", "Author")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Messaging.UserConversationLink", b =>
                {
                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Messaging.Conversation", "Conversation")
                        .WithMany("UserLinks")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Users.User", "User")
                        .WithMany("ConversationLinks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DM.Services.DataAccess.BusinessObjects.Users.Token", b =>
                {
                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Games.Game", "Game")
                        .WithMany("Tokens")
                        .HasForeignKey("EntityId");

                    b.HasOne("DM.Services.DataAccess.BusinessObjects.Users.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
